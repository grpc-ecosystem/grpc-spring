import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter
import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    ext {
        projectVersion = '2.8.0-SNAPSHOT'

        grpcVersion = '1.27.2'
        protobufVersion = '3.11.4'
        protobufGradlePluginVersion = '0.8.11'

        springBootVersion = '2.2.4.RELEASE'
        springCloudVersion = 'Hoxton.SR2'
        springDependencyManagementVersion = '1.0.9.RELEASE'
        springCloudAlibabaNacosVersion = '2.2.0.RELEASE'
        braveInstrumentationGrpc = '5.9.5'

        lombokVersion = '1.18.12'
        lombokPluginVersion = '3.2.0'
        versioningPluginVersion = '2.10.0'
        versionsPluginVersion = '0.27.0'

        annotationApiVersion = '1.3.2'
    }
}

plugins {
    id "java"
    id "java-library"
    id "org.springframework.boot" version "2.2.4.RELEASE" apply false
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "net.nemerosa.versioning" version "2.11.0"
    id "com.google.protobuf" version "0.8.11"
    id "io.franzbecker.gradle-lombok" version "3.3.0" apply false
    id "com.github.ben-manes.versions" version "0.28.0" // gradle dependencyUpdates (Takes quite some time)
    id "com.diffplug.gradle.spotless" version "3.27.1"
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

wrapper {
    gradleVersion = '6.2'
}

def buildTimeAndDate = OffsetDateTime.now()

ext {
    buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
    buildTime = DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'io.franzbecker.gradle-lombok'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
    }

    compileJava.options*.compilerArgs = [
            "-Xlint:all", "-Xlint:-processing"
    ]

    spotless {
        java {
            licenseHeaderFile rootProject.file('extra/spotless/mit-license.java')
            removeUnusedImports()
            importOrderFile rootProject.file('extra/eclipse/eclipse.importorder')
            eclipse().configFile rootProject.file('extra/eclipse/eclipse-formatter.xml')
        }
        format("misc") {
            target("**/*.gradle", "**/*.md", "**/*.yml")
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    // Copy LICENSE
    tasks.withType(Jar) {
        from(project.rootDir) {
            include 'LICENSE'
            into 'META-INF'
        }
    }

    // Generate MANIFEST.MF
    jar {
        manifest {
            attributes(
                    'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                    'Built-By': "travis",
                    'Build-Date': buildDate,
                    'Build-Time': buildTime,
                    'Built-OS': "${System.properties['os.name']}",
                    'Build-Revision': buildRevision,
                    'Specification-Title': project.name,
                    'Specification-Version': "${projectVersion}",
                    'Specification-Vendor': 'Michael Zhang',
                    'Implementation-Title': project.name,
                    'Implementation-Version': "${projectVersion}",
                    'Implementation-Vendor': 'Michael Zhang'
            )
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    buildscript {
        repositories {
            maven { url "https://plugins.gradle.org/m2/" }
        }
    }
}

Project commonProject = project(':grpc-common-spring-boot')

String javaAPIdoc
if (JavaVersion.current().isJava9Compatible()) {
    javaAPIdoc = 'https://docs.oracle.com/en/java/javase/11/docs/api'
} else {
    javaAPIdoc = 'https://docs.oracle.com/javase/8/docs/api/'
}

allprojects { project ->
    buildscript {
        dependencyManagement {
            imports {
                mavenBom "io.grpc:grpc-bom:${grpcVersion}"
                mavenBom "com.google.protobuf:protobuf-bom:${protobufVersion}"
                mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }

        ext {
            micrometerVersion = dependencyManagement.importedProperties['micrometer.version']
            springFrameworkVersion = dependencyManagement.importedProperties['spring-framework.version']
            springSecurityVersion = dependencyManagement.importedProperties['spring-security.version']
            springCloudCommonsVersion = dependencyManagement.importedProperties['spring-cloud-commons.version']
        }
    }
    if (project.name == 'grpc-common-spring-boot' || project.name == 'grpc-client-spring-boot-autoconfigure' || project.name == 'grpc-server-spring-boot-autoconfigure') {
        // Properly generate javadocs for the important projects

        task delombok(type: DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, "-d", outputDir)
            }
        }

        java {
            registerFeature('optionalSupport') {
                usingSourceSet(sourceSets.main)
            }
        }

        // Javadoc Task
        javadoc {
            dependsOn delombok
            source = delombok.outputDir
            failOnError = false
            options.locale = 'en_US'
            options.encoding = 'UTF-8'
            options.jFlags('-Dhttp.agent=gradle-javadoc') // Required for javadoc.io
            if (project.name != 'grpc-common-spring-boot') {
                options.linksOffline('https://static.javadoc.io/net.devh/grpc-common-spring-boot/' + projectVersion, commonProject.buildDir.getPath() + '/docs/javadoc')
            }
            options.links = [
                    javaAPIdoc,
                    'https://grpc.io/grpc-java/javadoc/',
                    'https://static.javadoc.io/io.micrometer/micrometer-core/' + micrometerVersion + '/',
                    'https://docs.spring.io/spring-framework/docs/' + springFrameworkVersion + '/javadoc-api/',
                    'https://docs.spring.io/spring-security/site/docs/' + springSecurityVersion + '/api/',
                    'https://docs.spring.io/spring-boot/docs/' + springBootVersion + '/api/',
                    'https://static.javadoc.io/org.springframework.cloud/spring-cloud-commons/' + springCloudCommonsVersion + '/',
                    // 'https://static.javadoc.io/io.zipkin.brave/brave/' + braveInstrumentationGrpc + '/', // Requires javadoc 11
                    // 'https://static.javadoc.io/io.zipkin.brave/brave-instrumentation-grpc/' + braveInstrumentationGrpc + '/', // Requires javadoc 11
                    'https://google.github.io/guava/releases/26.0-android/api/docs/'
            ]
        }

        // include annotation API spec for JDK 9+, prevents issues with Spring annotations by the consumer of the library
        if (JavaVersion.current().isJava9Compatible()) {
            dependencies {
                api "javax.annotation:javax.annotation-api:${annotationApiVersion}"
            }
        }
    }
}

apply from: './deploy.gradle'

group = "net.devh"
version = "${projectVersion}"

dependencies {
    compile project(':grpc-server-spring-boot-starter')
    compile project(':grpc-client-spring-boot-starter')

    testCompile project(':tests')
}
